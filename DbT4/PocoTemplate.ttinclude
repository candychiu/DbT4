<#@ assembly name="$(SolutionDir)packages\DatabaseSchemaReader.1.3.3.0\lib\net40\DatabaseSchemaReader.dll" #>
<#@ assembly name="$(SolutionDir)DbT4\bin\Debug\DbT4.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="DatabaseSchemaReader" #>
<#@ import namespace="DatabaseSchemaReader.DataSchema" #>
<#@ import namespace="DbT4Lib" #>
<#@ import namespace="System.Linq" #>
<#+
public class PocoTemplate : CSharpTemplate
{
	public IEnumerable<DatabaseTable> Tables { get; set; }
	public UserSettings Settings { get; set; }
		  
	public override string TransformText()
	{
		//base.TransformText();

		var headerRender = new UsingsTemplate();
        headerRender.Settings = Settings;
		headerRender.Elements = UserSettings.Elements.Poco;
#>
<#= headerRender.TransformText() #>
<#+        
		var nsPoco = Settings.Namespace;
		if (!string.IsNullOrEmpty(Settings.PocoNamespace))
			nsPoco = Settings.PocoNamespace;
#>

// ************************************************************************
// <#= Settings.DbContextName #> POCO

namespace <#= nsPoco #>
{
<#+
		foreach (var t in Tables)
		{
			var wrapper = new TableWrapper(t, Settings);
			WriteTable(wrapper);
		}            
#>
}
<#+
		return this.GenerationEnvironment.ToString();
	}

	private void WriteTable(TableWrapper tableWrapper)
	{		
#>

<#+ Settings.WritePocoClassAttributes(tableWrapper); #>
	public <#+ if(Settings.MakeClassesPartial) { #>partial <#+ } #>class <#=tableWrapper.NameHumanCase#><#= Settings.WritePocoBaseClasses != null ? " : " + Settings.WritePocoBaseClasses(tableWrapper) : "" #>
	{	
<#+ 
	//Settings.WritePocoBaseClassBody(TableWrapper); 

		//int DataMemberOrder = 1;
		

		foreach(var col in tableWrapper.Table.Columns.OrderBy(x => x.Ordinal))
		{
			var columnWrapper = new ColumnWrapper(col, tableWrapper, Settings);

			var comments = string.Empty;
			if (Settings.IncludeComments)
				comments = string.Format("// {0} {1}", columnWrapper.Name, 
				columnWrapper.IsPrimaryKey ? " (Primary key)" : string.Empty);			
#>
		<#= Settings.WritePocoColumn(columnWrapper) #> <#= comments #> 
<#+
			//WriteLine(Settings.WritePocoColumn(columnWrapper));
		}
#>
	}

<#+
		
	}
}
#>





